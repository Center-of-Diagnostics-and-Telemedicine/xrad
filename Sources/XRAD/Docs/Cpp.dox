// Doxygen
#error Файл с документацией, не компилируется
/*!
\page pg_CopyContructorOperatorEq Копирующие конструктор и operator =, обычные и шаблонные

Для многих шаблонных классов желательна возможность инициализации значениями
в точности такого же типа или типа, отличающегося только параметрами
шаблона.
Например, для ComplexSample &lt;double, double&gt; должны быть доступны
операции инициализации значениями типа ComplexSample &lt;float, double&gt;.

В таких случаях обычно копирующий конструктор должен быть и шаблонный, и в
точности от self (под self подразумевается сам тип).
Если объявить только от self, неудобно копировать из инородного массива.
Если объявить только шаблонный, то для self вызывается конструктор по
умолчанию, что не всегда желательно.

Выдержка из стандарта языка по теме:

> 12.8 Copying and moving class objects [class.copy]
>
> ...
>
> 17 A user-declared copy assignment operator X::operator= is a non-static
> non-template member function of class X
> with exactly one parameter of type X, X&, const X&, volatile X& or const volatile X&.
>
> 13.5.3 Assignment [over.ass]
>
> An assignment operator shall be implemented by a non-static member function
with exactly one parameter.

В наследниках простой копирующий конструктор необходимо переписывать в тех случаях,
когда следует явно избежать вызова цепочки родительских копи-конструкторов
или когда к этой цепочке добавляется какое-то свое действие в теле функции.
Если копирующий конструктор по умолчанию (с учетом родительской цепочки)
нас устраивает, достаточно описать только шаблонный, чтобы обеспечить
дополнительные варианты присваивания родственных типов.

Те же соображения целиком относятся и к оператору =.

\sa \ref pg_MoveOperations
*/

/*!
\page pg_MoveOperations Перемещающие операции (конструктор, operator =)

В стандарте C++11 введены перемещающие операции: конструктор, operator =.
Тип их параметров — rvalue-ссылка (type_name&&). (Следует различать их со
сходными по синтаксису шаблонными "универсальными ссылками" `template <class
T> ... func(T&&)`).

При реализации перемещающих операций следует иметь в виду следующие правила:

- Компилятор может сгенерировать перемещающие операции для класса,
автоматически или по запросу. Сгенерированные перемещающие операции
вызывают перемещающие операции для базовых классов и членов данных, которые
имеют реализованные перемещающие операции или для которых они могут быть
сгенерированы компилятором, копирующие операции для базовых
классов и членов данных, которые не имеют перемещающих операций, но имеют
копирующие операции, побайтовое копирование для базовых классов и членов
данных, которые не имеют ни перемещающих, ни копирующих операций. Но если
хотя бы в одном из базовых классов или членов данных перемещающая операция
запрещена (= delete), то компилятор не генерирует соответствующую перемещающую
операцию для класса.
- Компилятор генерирует перемещающую операцию автоматически, если в классе не
объявлены никакие копирующие операции, никакие перемещающие операции, не
объявлен _деструктор_.
- Чтобы запретить перемещающую операцию для класса, нужно объявить её
= delete. (Этот же механизм используется для запрещения любого метода класса.)
- Следует быть внимательным при наследовании. Запрещение _перемещающей_
операции в базовом классе не запрещает компилятору сгенерировать в наследнике
_копирующую_ операцию и использовать её вместо перемещающей операции для
наследника.
- Чтобы дать указание компилятору сгенерировать реализацию по умолчанию для
перемещающей операции, нужно объявить её = default. Это может понадобиться,
если, скажем, в классе объявлен деструктор, но реализация по умолчанию для
перемещающей операции нас устраивает.
Этим же способом (= default) можно дать указание компилятору сгенерировать
реализацию по умолчанию для конструктора без аргументов, копирующих операций,
деструктора.
- Шаблонные методы, которые могут принимать в качестве аргументов те же типы
данных, что и копирующие, перемещающие операции, не влияют на автоматическое
создание компилятором реализаций по умолчанию для копирующих и перемещающих
операций и не влияют на их использование (у нешаблонных функций имеется
приоритет над шаблонными функциями). Но здесь следует быть осторожным с
шаблонными "универсальными ссылками". Они более точно соответствуют типу
передачи параметра по значению, поэтому будут использоваться в этом случае
вместо операций от const class_name& и class_name&&. См. пример 1 и [1], 5.4.

Пример 1. Иллюстрация приоритета универсальной ссылки

~~~~
class Example
{
	public:
		Example() {}
		Example(const Example &) {}
		Example(Example &&) {}
		template <class T>
		Example(T&&) {}
};

void Test()
{
	Example e;
	Example e2(e); // вызывается template <class T> Example(T&&), T = Example&.
	Example e3 = Example(); // вызывается перемещающий Example(Example &&).
	const Example ce;
	Example e4(ce); // вызывается копирующий Example(const Example &).
}
~~~~

\sa \ref pg_CopyContructorOperatorEq

[1] Скотт Мейерс. Эффективный и современный C++. М., СПб., Киев: 2016.
*/
