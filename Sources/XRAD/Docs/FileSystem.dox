// Doxygen
#error Файл с документацией, не компилируется
/*!

\page pg_FileSystem Файловая система

Здесь приведены соображения по поддержке файловой системы.



# Имена файлов в разных операционных системах #

Многие операционные системы (ОС) и/или файловые системы (ФС) имеют ограничения
на имена файлов или особенности при их обработке. В большинстве операционных
систем пространства имен файлов иерархические, полное имя файла представляет
собой последовательность из имени диска или ресурса (опционально, не во всех
ОС), имен вложенных друг в друга каталогов и собственно имени файла [^0].
Это полное имя может быть представлено
строкой, в которой составные части отделяются специальными разделителями.
В Windows в качестве такого разделителя используется '\\', в старых MacOS —
':', в UNIX-подобных системах (и современной MacOS) — '/'.

> ^0 В Windows на NTFS у файла могут быть альтернативные потоки. В строковом
> представлении они кодируются строкой вида ":" stream_name [":$data"]
> в конце имени файла. Набор символов для stream_name не совпадает с набором
> символов остальной части имени файла.
> Полноценная поддержка таких потоков в библиотеке не предусмотрена.

На имена составных частей накладываются определенные ограничения. Есть
запрещенные к использованию символы (в Windows — '\\', '"', ':' и ряд других;
в UNIX-подобных системах — '/'). Некоторые символы считаются эквивалентными.
В Windows [^1], а также в MacOS при определенных настройках эквивалентны символы
верхнего и нижнего регистра. В MacOS являются эквивалентными различные формы
нормализации символа Unicode (например, Å U+00C5 и A U+0041 + ̊ U+030A).

> ^1 С помощью включения опции
> `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\kernel\obcaseinsensitive=dword:00000000`
> и флагов `FILE_FLAG_POSIX_SEMANTICS` и
> `FIND_FIRST_EX_CASE_SENSITIVE` в Windows можно работать через WinAPI с NTFS как
> с регистрозависимой ФС.
> См.
> https://mathematica.stackexchange.com/questions/97734/case-sensitive-file-names-windowsposix .
> См. также Windows Subsystem for Linux.

В некоторых ОС некоторые символы при сохранении имени файлв в ФС могут
заменяться на эквивалентные символы. Так, в MS-DOS, например, все символы
приводились к верхнему регистру; в MacOS все символы приводятся к форме NFD
(каноническая декомпозиция).

Также существуют зарезервированные имена, имеющие специальное значение.
Например, в Windows и UNIX-подобных системах зарезервированы имена "." и
".." [^2]. Создать файлы с такими именами нельзя.

> ^2 В Windows некоторые имена зарезервированы лишь частично. Например,
> через функции API можно создать и использовать файл "nul".
> В некоторых версиях Windows на NTFS можно было создать
> альтернативные потоки файла ".." и работать с ними.
> Но на уровне пользовательской оболочки работа с такими файлами невозможна.

На длину имени файла также обычно накладываются ограничения. Длина составных
частей имени файла (имена каталогов и конечное имя файла) часто не может
превышать ~255 символов (в Windows — 255 кодов UTF-16).
Длина полного имени тоже может быть ограничена (в Windows — 260 или 32767
кодов UTF-16, в зависимости от используемого API).



# Формат имен файлов в коде и во время исполнения #

Сейчас интерфейсные функции возвращают имена файлов в UNIX-формате (с
разделителем пути '/'). Функции fopen и подобные ожидают путь в формате ОС.
В Windows разделителем пути является '\\', но большинство функций API
принимают на вход и пути в UNIX-формате.

При записи в наши собственные файлы данных следует использовать какой-то один
формат пути, логично для этого использовать именно UNIX-формат.

\todo Следует разобраться с форматом пути для разных функций.

В старой версии библиотеки для хранения имен файлов предлагалось использовать
специальный класс. "Машинно-независимые" пути могли быть только относительные,
для их получения из машинно-зависимого пути и для обратного преобразования
требовалось (машинно-зависимое) имя референсного файла.
Вот выдержки из документации:

~~~~
class FileName
{
	// [...implementation details removed...]
	public:
		const char *u_str_relative( const FileName &location);
		const char *os_str( void);
		void ChangeName( const char *name);
		void ChangeType( const char *type);
		void ChangeNameType( const char *name, const char *type);
		void FromUStr( const char *ustr, const FileName &location);
		string GetName( void) const;
		string GetType( void) const;

	friend bool GetFileNameRead( FileName &result, const char *prompt, const char *type);
	friend bool GetFileNameWrite( FileName &result, const char *prompt, const char *type, const char *defaultName);
};

алфавит: ACSII 0x20-0x7f, 0x80-0xff для записи UTF-8
	0x00-0x20 - недопустимые символы, должны записываться через escape-последовательности
		(а вообще в именах файлов такого не должно быть)
	русские буквы записываются пока в принятой в OS кодировке; при сохранении имен в ини-файлах
		используется явный вызов кодирования в UTF-8
специальные символы: '/' (разделитель пути), '.' (разделитель типа), '\' (escape-символ)
	для записи служебных символов используются стандартные escape-последовательности языка C
		("\xNN" - в отличие от C не более 2 символов N, "\x0FF"=="\x0F"+"F", а не "\xFF"; "\OOO",
		"\\", "\""),
		"\C", где C - другой символ, эквивалентны "C", в частности: "\/"->"/", "\."->"."
path:
	может быть пустой либо заканчиваться на '/'.
	полное имя файла получается простым приписыванием слева path
	пустой path означает текущую директорию ("./" не используется, см. ниже)
	путь не должен содержать последовательностей (BEGIN|"/")"./" (use CompactPath())
	если путь начинается с '/', значит, он абсолютный
	последовательность "../" означает "директория вверх"
	путь не должен содержать последовательностей "/../" (но может начинаться с "../") (use CompactPath())
name:
	если используется, то должно быть непустым
	не может содержать '.', '/'. символы '/', '.' записывать '\/', '\.'
type:
	начинается с точки '.' либо пустая строка; к имени файла просто дописывается в конец,
		поэтому типы "." и "", вообще говоря, не одно и то же.
	замечание: на PC типы "." и "" эквивалентны.
	за искл. первого символа '.', не может содержать '.'.
	содержать '/' может только в виде escape-последовательностей, но лучше не надо.
os_info:
	* не реализовано, нуждается в продумывании
	используется для задания машинно-зависимой информации. формат поля зависит от платформы.
		например, на Mac может в некоторых случаях задавать 2 4-байтных расширения: "TEXTKAHL".
	поле заполняется функциями GetFileNameRead/Write, сбрасывается при операциях ChangeXXX.
	использовать только при отладке! см. также функцию RegisterFileNameOSInfo()
замечание:
	при переводе в os_str разные "нехорошие" символы могут заменяться другими
		в зависимости от реализации.
	на PC: {':', '/', '\', '|', '>', '<', '*', '?', '"', '\x00'-'\x1f'}->"_"
	на Mac: {':', '*', '?', '\x00'-'\x1f'}->"_"
	в силу особенностей реализации между вызовом os_str() и соответствующим fopen()
		не должно быть вызовов os_str() других объектов. на Mac это может привести
		к записи неправильного расширения файла.
		рекомендуется писать так: fopen( filename.os_str(), "wb");
		если всё же требуется передавать в функцию имена 2 и более файлов, передавайте
		их как FileName
~~~~



# Сравнение имен файлов #

При сравнении имен файлов, полученных при чтении каталога ФС, с именами
файлов, заданными в коде или полученными также при чтении каталога ФС, следует
учитывать возможные эквивалентные с точки зрения ОС преобразования имен
файлов.

Первый вариант сравнения, который приходит в голову, основан на сравнении с
учетом эквивалентности имен, принятой в ОС. Но здесь возникает проблема при
использовании сетевых ресурсов, находящихся под управлением других ОС, и
сменных носителей, записанных другими ОС. Поэтому есть соображения сделать
некоторую относительно универсальную процедуру сравнения, минимально зависящую
от текущей ОС.

Предлагается сравнивать имена файлов без учета регистра. Использование форм
нормализации для символов Unicode на данный момент представляется не очень
нужным, поэтому такую нормализацию положим опциональной.



# Выбор имен файлов, зафиксированных в коде #

При выборе имен файлов, зафиксированных в коде, например, для фиксированных
файлов данных, для масок имен файлов и т.п. следует учитывать особенности
различных ОС и ФС. Имя файла должно быть допустимым на всех используемых
платформах.

- Имя файла должно содержать только символы ASCII.
- Не должны использоваться символы, недопустимые в разных ОС: '/', '\\', '"',
  '*', '?', '<', '>', '|', '\\x00'-'\\x1F'. Желательно также не использовать
  символ пробела.
- На будущее: желательно не использовать символы, недопустимые или имеющие
	специальное значение для URI:
	"%",
	":" / "/" / "?" / "#" / "[" / "]" / "@",
	"!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "=".
- Имя не должно оканчиваться пробелом или точкой (но может начинаться с
	точки).
- Не должны использоваться зарезервированные имена: ".", "..", "~",
	"CONIN$", "CONOUT$", "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3",
	"COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
	"LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9",
	а также эти имена с расширениями (например, "nul.txt").
- Не должны использоваться имена, различающиеся только регистром символов.
- Все ссылки на один и тот же файл должны использовать бинарно равные имена
	(не должно быть различий в регистре символов). Это требование выполняется
	автоматически, если имя задается константой в одном месте программы.


# URI и IRI #

\todo Написать раздел про URI и IRI.

\sa \ref gr_FileSystem

*/

/*!
	\defgroup gr_FileSystem Файловая система

	Группа определена в файле FileSystem.dox.

	\sa \ref pg_FileSystem
*/
