include_guard()
include(${CMAKE_CURRENT_LIST_DIR}/CommonOptions.cmake)

get_filename_component(XRAD_private_Root "../.." ABSOLUTE BASE_DIR "${CMAKE_CURRENT_LIST_DIR}")
#message(XRAD_private_Root=${XRAD_private_Root})

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	include(${CMAKE_CURRENT_LIST_DIR}/DetectThirdParty.cmake)
	set(XRAD_IncludeDir "${XRAD_private_Root}" "${XRAD_ThirdParty}/vld/include")
	set(XRAD_BuildDir "${XRAD_private_Root}")
	set(XRAD_Vld_Libraries "${XRAD_ThirdParty}/vld/lib/${XRAD_Platform}/vld.lib")

	set(XRAD_MSVCRelativeBuildDir "out/build/${XRAD_Platform}-${XRAD_Configuration}/")

	# Записать в переменную var_name имя файла библиотеки package_name/library_name с путем
	function(xrad_compose_library_name var_name package_name)
		if(ARGC GREATER_EQUAL 3)
			set(library_name ${ARGV2})
		else()
			set(library_name ${package_name})
		endif()
		set(${var_name} "${XRAD_BuildDir}/${package_name}/${XRAD_MSVCRelativeBuildDir}${library_name}.lib" PARENT_SCOPE)
	endfunction()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	set(XRAD_IncludeDir "${XRAD_private_Root}")
	if(NOT DEFINED XRAD_private_BuildDir)
		set(XRAD_BuildDir "" CACHE PATH "XRAD library build directory.")
		if("${XRAD_BuildDir}" STREQUAL "")
			message(FATAL_ERROR "Please, specify XRAD library build directory (XRAD_BuildDir).")
		endif()
		set(XRAD_private_BuildDir "${XRAD_BuildDir}")
	endif()

	# Записать в переменную var_name имя файла библиотеки package_name/library_name с путем
	function(xrad_compose_library_name var_name package_name)
		if(ARGC GREATER_EQUAL 3)
			set(library_name ${ARGV2})
		else()
			set(library_name ${package_name})
		endif()
		set(${var_name} "${XRAD_private_BuildDir}/${package_name}/lib${library_name}.a" PARENT_SCOPE)
	endfunction()
else()
	message(FATAL_ERROR "Unsupported CMAKE_CXX_COMPILER_ID: \"${CMAKE_CXX_COMPILER_ID}\".")
endif()
