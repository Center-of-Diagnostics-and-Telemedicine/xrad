// file CommonConfig.h
//--------------------------------------------------------------
#ifndef __CommonConfig_h
#define __CommonConfig_h
//--------------------------------------------------------------
/*!
	\addtogroup gr_Config
	@{

	\file
	\brief Заголовочный файл общей, не зависящей от компилятора, конфигурации библиотеки

	Внутренний файл библиотеки.
*/
//--------------------------------------------------------------

namespace std {}
namespace xrad
{
	using namespace std;
}

//--------------------------------------------------------------

// Определение NDEBUG описано в стандарте C++ в связи с макросом assert.
// Смысл его очень близок к тому, что нам нужно для включения и отключения в коде дополнительных
// проверок.
// Практика работы с разными компиляторами показывает, что NDEBUG определяется в нужных нам
// случаях, использование CompilerSpecific не требуется.
#ifndef NDEBUG
	/*!
		\brief Если определено, можно использовать дополнительные проверки в коде. Проверку
		следует делать в виде ifdef XRAD_DEBUG / if defined(XRAD_DEBUG)

		\note Сейчас значение контанты равно 1, но это может измениться в будущем.
	*/
	#define XRAD_DEBUG 1
#endif

//--------------------------------------------------------------
// Настройки работы итераторов
//--------------------------------------------------------------

#ifdef XRAD_DEBUG
	//! \brief Контролироовать выход за границы массива для итераторов
	#define XRAD_USE_CHECKED_ITERATORS
#endif

//--------------------------------------------------------------
// Информация о текущей конфигурации (для зависящих от библиотеки проектов)
//--------------------------------------------------------------

//! \brief Номер версии операций над контейнерами
#define XRAD_CFG_ARRAYS_INTERACTIONS_VER 2

//--------------------------------------------------------------
//! @} <!-- ^group gr_Config -->
#endif // __CommonConfig_h
