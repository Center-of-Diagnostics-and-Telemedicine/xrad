// file Config.h
//--------------------------------------------------------------
#ifndef __Config_h
#define __Config_h
//--------------------------------------------------------------
/*!
	\defgroup gr_Config Конфигурация библиотеки XRAD
	@{

	\file
	\brief Главный заголовочный файл конфигурации библиотеки, подключает другие файлы

	Внутренний файл библиотеки.
*/
//--------------------------------------------------------------

#ifndef __cplusplus
	#error C is not supported in XRAD
#endif

/*!
	\page pg_XRAD_COMPILER XRAD_COMPILER_*

	\par
	Реализация некоторых функций невозможна единым эффективным способом для всех компиляторов.
	Для определения используемого компилятора следует использовать макроопределения вида
	`XRAD_COMPILER_XXX`, перечисленные ниже.
	На "верхнем уровне" `#if` следует использовать именно их, а не специфические макроопределения
	компиляторов (типа `_MSC_VER`). Внутри блоков `#ifdef XRAD_COMPILER_XXX` можно использовать
	макроопределения, специфичные для компилятора XXX.

	\par
	Компилятор MSVC:
	~~~~
	#define XRAD_COMPILER_MSC
	~~~~

	\par
	Значение этой константы совпадает со значением `_MSC_VER`.

	\par
	Компилятор GNU C++:
	~~~~
	#define XRAD_COMPILER_GNUC
	~~~~

	\par
	Значение этой константы совпадает со значением `__GNUC__` (старший номер версии компилятора).
	См. также `__GNUC__`, `__GNUC_MINOR__`, `__GNUC_PATCHLEVEL__`.
*/

/*!
	\page pg_XRAD_USE XRAD_USE_*

	\par
	Часть функций могут реализовываться разными способами: могут иметь универсальную реализацию
	(с использованием только стандартной библиотеки C++), а также оптимизированные реализации
	для определенных платформ и компиляторов.
	Указание используемого способа делается в CompilerSpecific.h путем установки одного
	или нескольких макроопределений из перечисленных ниже (`XRAD_USE_*`).
	Если ни одно их этих макроопределений не задано, используются универсальные реализации.
	В этом случае при отсутствии универсальной реализации некоторые функции библиотеки могут быть
	недоступны.
	Если задано несколько макроопределений, выбор используемой версии производится для каждой
	функции независимо.

	\par
	Использовать реализацию через библиотеку Qt:
	~~~~
	#define XRAD_USE_QT_VERSION
	~~~~

	\par
	Использовать реализацию для Win32 / MSVC:
	~~~~
	#define XRAD_USE_MS_VERSION
	~~~~

	\par
	Для случая отсутствия работоспособной универсальной реализации: определить универсальную
	реализацию-заглушку, позволяющую по крайней мере скомпилировать приложение.
	Реализация может, к примеру, возвращать пустой результат или кидать исключение (если это
	допускает спецификация функции).
	Для тестирования этих заглушек необходимо выключить остальные макроопределения XRAD_USE_*.
	~~~~
	#define XRAD_USE_DUMMY_STD_FALLBACK_VERSION
	~~~~

	\par
	Следующее макроопределение включает приоритет использования универсальных (платформо-независимых)
	реализаций функций даже при наличии оптимизированных для используемой платформы версий
	(Но не включает использование реализаций-заглушек XRAD_USE_DUMMY_STD_FALLBACK_VERSION.)
	Предназначено главным образом для тестирования универсального кода.
	~~~~
	#define XRAD_USE_PREFER_STD_VERSION
	~~~~
*/

//--------------------------------------------------------------

#include "CompilerSpecific.h"

#include "CommonConfig.h"

//--------------------------------------------------------------
//! @} <!-- ^group gr_Config -->
#endif // __Config_h
